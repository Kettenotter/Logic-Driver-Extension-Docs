<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kettenotter]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/</link><image><url>https://logic-driver-extension-docs.kettenotter.de/httpdocs/lib/media/favicon.png</url><title>Kettenotter</title><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sat, 27 Jul 2024 11:23:31 GMT</lastBuildDate><atom:link href="https://logic-driver-extension-docs.kettenotter.de/httpdocs/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 27 Jul 2024 11:23:27 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[How to access and cast the context]]></title><description><![CDATA[ 
 <br><br>A common way to store a pointer to the Context is on state machine start.<br>
Cast to the class and store it as a variable.<br>
But why is this problematic?<br>
You should try to always use the minimum class. If you want to move the actor don’t use AYourActor but AActor. Then you can run this part of the State Machine on any Actor easily and don’t have to rework the logic. Now you could think… then I just store a Pointer to AActor and cast it to the AYourActor when I need. But then you did cast anyway. Why not directly use the context and cast it?<br>
Cons of storing the Context as variable:<br>
→ Hard to use states in different State Machines.<br>
→ Hard to maintain/memorize which ptrs are available in which state machine.<br>
→ Not available in custom states or you have to cast to the root state machine and make some<br>Pros of using the Context and casting it:<br>
→ Easy to work with, no quess working which variables are available.<br>
→ Can it use it anywhere, copy code to any state machine, any node class<br>
→ Not any real performance difference.]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver/how-to-access-and-cast-the-context.html</link><guid isPermaLink="false">Gamedev/Plugin Docs/Logic Driver/How to access and cast the context.md</guid><pubDate>Thu, 25 Jul 2024 21:16:24 GMT</pubDate></item><item><title><![CDATA[GAS States]]></title><description><![CDATA[ 
 <br><br>This node will add the loose tag while it is active.<br>
You can use it in  a Sub State-Machine and an parallel entry to apply the tag while this part is active.<br><br>Applies the Effect to the target.<br>
Has an Option for removing the effect when the State is left.<br>
The target can be:<br>
<br>Context → The Context the SM is running
<br>Target → Plug in the Target of the State Machine
<br>Source → The Source which caused the transition. The Actor who applied the effect to you. Did send the Gameplay Event.
]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver-extension/gas-module/gas-states.html</link><guid isPermaLink="false">Gamedev/Plugin Docs/Logic Driver Extension/GAS Module/GAS States.md</guid><pubDate>Sat, 27 Jul 2024 10:31:15 GMT</pubDate></item><item><title><![CDATA[GAS Transitions]]></title><description><![CDATA[ 
 ]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver-extension/gas-module/gas-transitions.html</link><guid isPermaLink="false">Gamedev/Plugin Docs/Logic Driver Extension/GAS Module/GAS Transitions.md</guid><pubDate>Sat, 27 Jul 2024 07:54:27 GMT</pubDate></item><item><title><![CDATA[Generic Notes Overview]]></title><description><![CDATA[ 
 ]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver-extension/utility-module/generic-notes-overview.html</link><guid isPermaLink="false">Gamedev/Plugin Docs/Logic Driver Extension/Utility Module/Generic Notes Overview.md</guid><pubDate>Sat, 27 Jul 2024 09:06:47 GMT</pubDate></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br>This Plugin extends the Logic Driver Pro Plugin. It contains two modules:<br><br> The first one adds generic functions for improving the context access and other workflow improvements like a timer which ends when the state is left.<br><img alt="Notes" src="https://private-user-images.githubusercontent.com/32515271/312667161-1bf7112d-4b12-45a3-b207-0dfb0611014b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjIwNjg0MzQsIm5iZiI6MTcyMjA2ODEzNCwicGF0aCI6Ii8zMjUxNTI3MS8zMTI2NjcxNjEtMWJmNzExMmQtNGIxMi00NWEzLWIyMDctMGRmYjA2MTEwMTRiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MjclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzI3VDA4MTUzNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZkZjZmZWU1ZDZkNGRmYmQ0NzZiOGNlMzM5NGMyNWYyNTQxYWExNzU1ZmViYzViMmM3ZjBkYzY2ZGU3YThhYzMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.HzTlHsk_q5F_vH9QPig2xZef4kYvpy_QBBIs9kvaFJ0" referrerpolicy="no-referrer"><br><br> The second is an integration with the Gameplay Ability System. Which adds transitions for tags, events, effects… And many other things.<br>
<br>Gameplay Tag
<br>Gameplay Tag Query
<br>Attribute Reach Zero
<br><a data-href="GAS States" href="https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver-extension/gas-module/gas-states.html" class="internal-link" target="_self" rel="noopener">GAS States</a>]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver-extension/overview.html</link><guid isPermaLink="false">Gamedev/Plugin Docs/Logic Driver Extension/Overview.md</guid><pubDate>Sat, 27 Jul 2024 10:34:11 GMT</pubDate><enclosure url="https://private-user-images.githubusercontent.com/32515271/312667161-1bf7112d-4b12-45a3-b207-0dfb0611014b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjIwNjg0MzQsIm5iZiI6MTcyMjA2ODEzNCwicGF0aCI6Ii8zMjUxNTI3MS8zMTI2NjcxNjEtMWJmNzExMmQtNGIxMi00NWEzLWIyMDctMGRmYjA2MTEwMTRiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MjclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzI3VDA4MTUzNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZkZjZmZWU1ZDZkNGRmYmQ0NzZiOGNlMzM5NGMyNWYyNTQxYWExNzU1ZmViYzViMmM3ZjBkYzY2ZGU3YThhYzMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.HzTlHsk_q5F_vH9QPig2xZef4kYvpy_QBBIs9kvaFJ0" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://private-user-images.githubusercontent.com/32515271/312667161-1bf7112d-4b12-45a3-b207-0dfb0611014b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjIwNjg0MzQsIm5iZiI6MTcyMjA2ODEzNCwicGF0aCI6Ii8zMjUxNTI3MS8zMTI2NjcxNjEtMWJmNzExMmQtNGIxMi00NWEzLWIyMDctMGRmYjA2MTEwMTRiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA3MjclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNzI3VDA4MTUzNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZkZjZmZWU1ZDZkNGRmYmQ0NzZiOGNlMzM5NGMyNWYyNTQxYWExNzU1ZmViYzViMmM3ZjBkYzY2ZGU3YThhYzMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.HzTlHsk_q5F_vH9QPig2xZef4kYvpy_QBBIs9kvaFJ0"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Performance]]></title><description><![CDATA[ 
 <br>This Plugin is Optimized for CPU and Memory.<br><br>All the logic is implemented in c++ and operates without ticking.<br><br>I try to reduce memory as much as possible. There shouldn’t be much of a difference between my classes and empty transitions.<br>
Some of the memory Optimization Strategies in use are:<br>
→ Using uint8 instead of bools and other small data types.<br>
→ For some Nodes I use a custom sparse data structure for data which only exists on the State Template and doesn’t need to get copied onto every State Machine Instance.<br>
→ Caching GAS related data in a separate subsystem to only allocate the memory when needed.]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver-extension/performance.html</link><guid isPermaLink="false">Gamedev/Plugin Docs/Logic Driver Extension/Performance.md</guid><pubDate>Sat, 27 Jul 2024 10:50:43 GMT</pubDate></item><item><title><![CDATA[Todo]]></title><description><![CDATA[ 
 <br>→ Perhaps speed up context casting to specific classes by storing them on the sm class and using it when available. Okay that makes no sense because I then would need to cast to the SM]]></description><link>https://logic-driver-extension-docs.kettenotter.de/httpdocs/gamedev/plugin-docs/logic-driver-extension/todo.html</link><guid isPermaLink="false">Gamedev/Plugin Docs/Logic Driver Extension/Todo.md</guid><pubDate>Thu, 25 Jul 2024 21:19:00 GMT</pubDate></item></channel></rss>